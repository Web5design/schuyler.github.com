<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | hoc est repo meum.]]></title>
  <link href="http://schuyler.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://schuyler.github.com/"/>
  <updated>2012-09-07T17:16:52-07:00</updated>
  <id>http://schuyler.github.com/</id>
  <author>
    <name><![CDATA[Schuyler Erle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to permanently remove files from a Git repository.]]></title>
    <link href="http://schuyler.github.com/blog/how-to-permanently-remove-files-from-a-git-repo.html"/>
    <updated>2012-09-06T10:22:00-07:00</updated>
    <id>http://schuyler.github.com/blog/how-to-permanently-remove-files-from-a-git-repo</id>
    <content type="html"><![CDATA[<p>Oops. I did a <code>git commit .</code> and then the subsequent <code>git push</code> took
suspiciously long. Yep, that's right, I've pushed a gigantic binary up to my
remote Git repo by accident. How do I remove the file from the repository
permanently?</p>

<!-- more -->


<p>I found a
<a href="http://dound.com/2009/04/git-forever-remove-files-or-folders-from-history/">basic solution</a>
given as a shell script, which I just decided to run manually on my local repo.</p>

<p><code>bash
$ git filter-branch -f --index-filter "git rm -rf --cached --ignore-unmatch full/path/to/the/offending.file" HEAD
Rewrite 118bbd4b7b02f01cc221c11aec2705cbxxxxxxxx (59/59)
Ref 'refs/heads/master' was rewritten
$ rm -rf .git/refs/original/ &amp;&amp; git reflog expire --all &amp;&amp;  git gc --aggressive --prune
</code></p>

<p>You can
<a href="http://dalibornasevic.com/posts/2-permanently-remove-files-and-folders-from-a-git-repository">read a little more</a>
about how this works, if you like.</p>

<p>This approach worked fine locally, but doing a forced push with <code>git push -f</code>
gave me a <code>[remote rejected]</code> error, apparently because, as described
in <a href="http://stackoverflow.com/questions/1270514/undoing-a-git-push">this StackOverflow post</a>,
I have the remote repo configured with <code>receive.denyNonFastForwards</code>.</p>

<p>Fortunately, this clusterfuck was on a private repository on my own server, so
I could log in and repair the damage manually. If the repo was on Github, I'd have
been <a href="https://help.github.com/articles/remove-sensitive-data">basically out of luck</a>.</p>

<p>So I logged in and ran <code>su</code> in order to run commands as the <code>git</code> user on my
system (which owns the remote repos).</p>

<p><code>
$ sudo su - git
$ cd /path/to/my/repo
</code></p>

<p>Then I ran the <code>git filter-branch</code> command above on the remote repo, which succeeded,
and then running <code>git pull</code> locally also succeeded:</p>

<p><code>
 + 119bbd4...eeaxxxxx master -&gt; origin/master  (forced update)
Merge made by recursive.
</code></p>

<p>The lesson? Always run <code>git status</code> before running <code>git commit .</code> or <code>git
commit -a</code> -- and use <code>git commit --amend</code> judiciously <em>before</em> <code>git push</code> if
you screw up! Screwups in the local repo are easier to fix before they get
pushed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to cherry-pick a Git commit from another repo.]]></title>
    <link href="http://schuyler.github.com/blog/how-to-cherry-pick-a-git-commit-from-another-repo.html"/>
    <updated>2012-08-29T15:43:00-07:00</updated>
    <id>http://schuyler.github.com/blog/how-to-cherry-pick-a-git-commit-from-another-repo</id>
    <content type="html"><![CDATA[<p>So, as soon as I got this blog started, I discovered that the Github plugin on
the right side wasn't showing any repos. Naturally, I googled for the
<a href="https://github.com/imathis/octopress/issues/636">error message</a> and found
<a href="https://github.com/imathis/octopress/issues/636#issuecomment-8113731">a reference</a> to
<a href="https://github.com/imathis/octopress/pull/732">a pull request</a> for
<a href="https://github.com/djohnsonm/octopress/commit/dd8b24f94c6cb86124d7bc3c8cf0ada6c974e214">a commit</a>
that fixed the issue. How to apply David Johnson's fix without possibly
screwing up everything else in my local Octopress repo?</p>

<!-- more -->


<p>First, add his fork as a remote, fetch it, and make sure that the desired
commit is in there.</p>

<p><code>
git remote add djohnsonm https://github.com/djohnsonm/octopress.git
git fetch djohnsonm
git log djohnsonm/master
</code></p>

<p>Sure enough, the fix is at the top.</p>

<p>```
commit dd8b24f94c6cb86124d7bc3c8cf0ada6c974e214
Author: David Johnson <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#100;&#106;&#x6f;&#104;&#x6e;&#115;&#x6f;&#x6e;&#46;&#109;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;">&#100;&#x6a;&#111;&#104;&#110;&#115;&#x6f;&#x6e;&#46;&#109;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;</a>
Date:   Tue Aug 28 21:31:20 2012 -0500</p>

<p>Update .themes/classic/source/javascripts/github.js</p>

<p>Fixed the github repo url to return an valid url and not just .json.
```</p>

<p>So <code>git cherry-pick</code> to the rescue. Just give it a reference to the commit
you want to cherry pick. You don't even need to say which branch you want it
from, because Git already knows which branch contains that commit.</p>

<p><code>
git cherry-pick dd8b24
</code></p>

<p>That's all you have to do as far as Git is concerned.</p>

<p>In terms of fixing the issue in Octopress, note that this doesn't actually
update <code>source/</code> -- just <code>.themes/source/</code>, so copy the file manually, commit,
and push.</p>

<p><code>
cp .themes/classic/source/javascripts/github.js source/javascripts/
git commit -m "Deploy the applied github.js fix."
git push
</code></p>

<p>Then, since this is Octopress, rebuild the site and deploy.</p>

<p><code>
rake generate
rake deploy
</code></p>
]]></content>
  </entry>
  
</feed>
